generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(BUYER)
  phone     String?
  address   String?
  bio       String?
  company   String?
  businessName String?
  gender    String?
  isActive  Boolean   @default(true)
  sellerStatus SellerStatus @default(INACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
  reviews   Review[]
  orders    Order[]
  cart      Cart?
  notifications Notification[]
  chatMessages  ChatMessage[]
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

enum SellerStatus {
  INACTIVE
  ACTIVE
  SUSPENDED
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  stock        Int       @default(0)
  category     Category  @relation(fields: [categoryId], references: [id])
  coverImage  String   @default("https://aannet.org/global_graphics/default-store-350x350.jpg")
  categoryId   Int
  createdBy    User?     @relation(fields: [createdById], references: [id])
  createdById  Int?
  averageRating Float    @default(0)
  numReviews   Int       @default(0)
  isVisible    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  reviews      Review[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Review {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])
}

model Cart {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?      @unique
  guestId   String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)

  @@unique([cartId, productId])
}

model Order {
  id                  Int        @id @default(autoincrement())
  user                User       @relation(fields: [userId], references: [id])
  userId              Int
  shippingAddress     Json
  paymentCode         String?
  paymentMethod       String?
  paymentResult       Json?
  totalPrice          Float
  isPaid              Boolean    @default(false)
  paidAt              DateTime?
  isDelivered         Boolean    @default(false)
  deliveredAt         DateTime?
  isConfirmedByAdmin  Boolean    @default(false)
  confirmedAt         DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  items               OrderItem[]
  notifications       Notification[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float

  @@unique([orderId, productId])
}

model Notification {
  id             Int       @id @default(autoincrement())
  user           User?     @relation(fields: [userId], references: [id])
  userId         Int?
  message        String
  recipientRole  Role
  relatedOrder   Order?    @relation(fields: [relatedOrderId], references: [id])
  relatedOrderId Int?
  isRead         Boolean   @default(false)
  createdAt      DateTime  @default(now())
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  message   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
